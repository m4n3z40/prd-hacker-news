---
import StoriesRepository from '../../repositories/Stories';
import MainLayout from '../../layouts/main.astro';
import Error from '../../components/Error.astro';
import MainStoryContainer from '../../components/MainStoryContainer.astro';
import PostSummary from '../../components/PostSummary.astro';
import CommentForm from '../../components/CommentForm.astro';
import CommentTimeline from '../../components/CommentTimeline.astro';

const { locals: { user, baseApiUrl }, params, url } = Astro;
const storiesRepo = new StoriesRepository(baseApiUrl);
const id = parseInt(params.slug.split('/')[0], 10);

const story = await storiesRepo.getById(id);

const { stories, rootKids } = await storiesRepo.getDescendantsByParentId(id);

stories[story.id] = story;

const flashErrorVote = Astro.cookies.get('flash_error_vote')?.value;
---
<MainLayout title={`Product Hacker News | ${story.title}`}>
  <script slot="head" type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "DiscussionForumPosting",
    "mainEntityOfPage": url.href,
    "headline": story.title,
    "text": story.text,
    "url": url.href,
    "author": {
      "@type": "Person",
      "name": story.by
    },
    "datePublished": new Date(story.created_at + '.000Z').toISOString(),
    "interactionStatistic": story.score >= 0 ? {
      "@type": "InteractionCounter",
      "interactionType": "https://schema.org/LikeAction",
      "userInteractionCount": story.score
    } : {
      "@type": "InteractionCounter",
      "interactionType": "https://schema.org/DislikeAction",
      "userInteractionCount": story.score * -1
    },
    "comment": rootKids.map(id => ({
      "@type": "Comment",
      "text": stories[id].text,
      "author": {
        "@type": "Person",
        "name": stories[id].by
      },
      "datePublished": new Date(stories[id].created_at + '.000Z').toISOString(),
      "interactionStatistic": stories[id].score >= 0 ? {
        "@type": "InteractionCounter",
        "interactionType": "https://schema.org/LikeAction",
        "userInteractionCount": stories[id].score
      } : {
        "@type": "InteractionCounter",
        "interactionType": "https://schema.org/DislikeAction",
        "userInteractionCount": stories[id].score * -1
      }
    }))
  })}></script>
  {flashErrorVote && <Error>{flashErrorVote}</Error>}
  <MainStoryContainer>
    <PostSummary story={story} titleEl="h1" showText />
    {user ? <CommentForm parentID={story.id} rootID={story.id} /> : null}
    <CommentTimeline items={story.kids ?? []} getItem={id => stories[id]} />
  </MainStoryContainer>
</MainLayout>
