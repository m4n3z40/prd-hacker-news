---
import StoriesRepository from '../repositories/Stories';
import MainLayout from '../layouts/main.astro';
import Error from '../components/Error.astro';
import PostList from '../components/PostList.astro';

const { locals, url, cookies } = Astro;

const storiesRepo = new StoriesRepository(locals.baseApiUrl);

const postType = (url.searchParams.get('type') || 'post') as PostType;
const order = (url.searchParams.get('order') || 'top') as 'top' | 'new';
const page = parseInt(url.searchParams.get('page') || '1', 10);
const perPage = 30;

const { stories, meta } = await storiesRepo.getAll({ type: postType, order, page, perPage });

const flashErrorVote = cookies.get('flash_error_vote')?.value;
const postTypeError = ['post', 'ask', 'show', 'job'].some(t => t === postType) ? null : 'Invalid post type.';
---
<MainLayout>
  {flashErrorVote && <Error>{flashErrorVote}</Error>}
  {postTypeError && <Error>{postTypeError}</Error>}
  <PostList
    items={stories}
    page={page}
    perPage={perPage}
    totalCount={meta.total}
    buildPaginationURL={searchParams => {
      searchParams.set('type', postType);
      searchParams.set('order', order);
      const url = new URL(Astro.url.pathname, Astro.url.origin);
      url.search = searchParams.toString();
      return url.href;
    }}
  />
</MainLayout>
